基本说明：
	with语句的作用是将代码的作用域设置到一个特定的作用域中，基本语法如下：
		with (expression) statement;

with的缺点：1、性能问题；2、语义不明，调试困难
	1、性能问题
		未使用with‘
			function func() {
				console.time("func");
				var obj = {
					a: [1, 2, 3]
				};
				for (var i = 0; i < 100000; i++) {
					var v = obj.a[0];
				}
				console.timeEnd("func");//0.847ms
			}
			func();		
		使用with
			function funcWith() {
				console.time("funcWith");
				var obj = {
					a: [1, 2, 3]
				};
				with (obj) {
					for (var i = 0; i < 100000; i++) {
						var v = a[0];
					}
				}
				console.timeEnd("funcWith");//88.260ms
			}
			funcWith();
		使用了with关键字后了，代码的性能大幅度降低。
		
		其根本原因是代码无法优化：
		JS引擎在代码执行之前有一个编译阶段，在不使用with关键字的时候，
			js引擎知道a是obj上的一个属性，它就可以静态分析代码来增强标识符的解析，
			从而优化了代码，因此代码执行的效率就提高了。使用了with关键字后，
			js引擎无法分辨出a变量是局部变量还是obj的一个属性，因此，js引擎在遇到with关键字后，
			它就会对这段代码放弃优化，所以执行效率就降低了。
			使用with关键字对性能的影响还有一点就是js压缩工具，
			它无法对这段代码进行压缩，这也是影响性能的一个因素。
	
	2、语义不明，调试困难
			function foo(obj) {
				with (obj) {
					a = 2;
				}
			}

			var o1 = {
				a: 3
			};
			var o2 = {
				b: 3
			};

			foo(o1);
			console.log(o1.a); // 2

			foo(o2);
			console.log( o2.a ); // undefined
			console.log( a ); // 2
			
		在foo函数内，使用了with关键字来访问传进来的obj对象，然后修改a属性。
			当传入o1对象时，因为o1对象存在着a属性，所以这样没有问题。
			传入o2对象时，在修改a属性时，由于o2对象没有a这个属性，
			所以被修改的a属性则变成了全局变量。这就造成了潜在的bug。
		见下例：
			var obj = {
				x: 10,
				foo: function () {
					var x;//声明局部变量x
					var y;//声明局部变量y
					with (obj) {
						x = 20;//访问变量x，在obj上找到x，则修改为20
						y = 30;//访问变量y，在obj上找不到y，则进一步查找，找到局部变量y，修改为30
						console.log(y);//30//直接输出局部变量y，
					}
				console.log(y);//30，此时的y变成了函数的局部变量。
				}
				
			};
			obj.foo();
			console.log(obj.x);//20，obj.x已被修改为20
			console.log(obj.y);//undefined，obj不存在y属性，则为undefined		
		
		第二例：
			var obj={
			x: 10,
			foo: function () {
				var x;
				var y;
				
				function bar() {
					console.log(x);//undefined。x只是作为obj的属性出现，
					console.log(y);//30，输出的是局部变量y
					console.log(this.x);//20，输出的是作为obj的属性的obj.x。
				}
				with (this) {

					x = 20;//访问变量x，在obj上找到x，则修改为20
					y = 30;//访问变量x，在obj上没有找到y，则进一步查找，找到局部变量y，修改为30
					//上两步体现了with延长作用域链的特点，本来应该是先查找局部变量，但此时却先查的是
					//obj内的作用域。
					bar.call(this);
				}
			}
			};
			obj.foo();

		
			