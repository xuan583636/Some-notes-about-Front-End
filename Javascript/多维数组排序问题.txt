js二维数组定义和初始化：

	方法一：直接定义并且初始化，这种遇到数量少的情况可以用
				var _TheArray = [["0-1","0-2"],["1-1","1-2"],["2-1","2-2"]]
				
	方法二：未知长度的二维数组
				var tArray = new Array();  //先声明一维  
				for(var k=0;k<i;k++){    //一维长度为i,i为变量，可以根据实际情况改变  
					tArray[k]=new Array();  //声明二维，每一个一维数组里面的一个元素都是一个数组；  
					for(var j=0;j<p;j++){   //一维数组里面每个元素数组可以包含的数量p，p也是一个变量；  
						tArray[k][j]="";    //这里将变量初始化，我这边统一初始化为空，后面在用所需的值覆盖里面的值  
					}
				}

	方法三：已知几个数组，把他们组合成一个二维数组情况
				for(var a=0;a<i;a++){
					tArray[a]=[ aArray[a],bArray[a],cArray[a]]; //还可以增加dArray[a],eArray[a]
					}
					
二维数组sort排序
	1、按数值排序
				arr.sort(function(x, y){
				  return x[0] – y[0];
				});
		注意这个x[0]与y[0]，比较函数同之前的一样，其实直接输入要比较的第几位即可。
		
	2、按字符串排序
		按字符串排序的话呢，我们可以利用js提供的localeCompare方法，
			localeCompare作用：用本地特定的顺序来比较两个字符串。
			localeCompare方法的使用规则是stringObject.localeCompare(target)，
			如果 stringObject 小于 target，则 localeCompare() 返回小于 0 的数。
			如果 stringObject 大于 target，则该方法返回大于 0 的数。
			如果两个字符串相等，或根据本地排序规则没有区别，该方法返回 0。
			比较器使用的是本地的规则，本地规则意思就是使用操作系统底层对这些本地字符排序的规则进行排序比较器使用的是本地的规则，
			本地规则意思就是使用操作系统底层对这些本地字符排序的规则进行排序。
			默认情况下比如使用大于号这样的比较只是纯粹比较两个字符的unicode的数大小，会与很多语言不符。
				var arr = [['中','国'], ['啊','的'], ['哦','的']];
				arr.sort(function(x, y){
				  return x[0].localeCompare(y[0]);
				});
		结果就会按第一列中文字的拼音排序，如果含有英文的话，默认是将英文放在前面，
			如果是纯英文的话，会按字母顺序来，大写排在小写的后面，
			这样就可以实现字符串的排序了，包括中文和中英混排。