引用类型的值（对象）是引用类型的一个实例。
	引用类型是一种数据结构，用于将数据和功能组织在一起
	对象是某个特定引用类型的实例。
	新对象是使用new操作符后跟一个构造函数创建的，
	构造函数本身局势一个函数，只不过该函数是出于
	创建新对象的目的而定义的。
	
				var person = new Object();
上式创建了Object引用类型的一个新实例，然后把该实例保存在了
	变量person中，使用的构造函数是Object，其只为新对象定义了默认的属性和方法
	
一、Object类型：
	主要是用作储存和传输数据
	1、创建方法：new+Object；对象字面量
		A、new操作符后面跟Object构造函数
				var person = new Object();
				person.name = "Nicholas";
				person.age = 29;
		B、对象字面量表示法：
				var person ={
					name : "Nicholas"，
					age : 29
				}
		用逗号，分割每个属性。注意其最后一个属性后面不加逗号，。
		使用对象字面量语法时，若留空其花括号，则可以
			定义只包含默认属性和方法的对象
				var person = {}；
				person.name = "Nicholas";
				person.age = 29;
	2、访问方法
		访问对象的属性时使用点表示法，当然也可以使用方括号表示法
		使用方括号语法时，将要访问的属性以字符串的形式放在方括号中
				alert(person.name);
				alert(person["name"]);
		方括号法可以通过赋值变量来进行属性的访问。

二、Arrray类型
	是一个有序列表，但ECMASript数值的每一项可以保存任何类型的数据。
		即：可以用数组的第一个位置来保存字符串，
		用第二个位置来保存数值，用第三个位置来保存对象，依次类推
		此外，其数组大小可以动态调整。
	
	构造方法：
	1、使用Array构造函数：
				var colors = new Arrray();
		如果预先知道要保存的项目数量，可以给构造函数传递该数量，
			该数量会自动变为length属性的值
				var colors = new Arrray(20);
		可以直接向Array构造函数传递数组中应该包含的项：
				var colors = new Arrray("red", "blue", "green");
		当然，构造的时候可以省略new，直接使用Arrray。
				var colors = Arrray(3);
	2、使用数组字面量(不建议)：
				var colors = ["red", "blue", "green"];
			
		在读取或设置数组的值时，要使用方括号[]并提供相应值的基于0的数字索引。
				var colors=["red","blue","green"];
				alert(colors[0]);          //显示第一项
				colors[2]="black";	    //修改第三项
				colors[3]="brown";	//新增第四项
		数组的项数保存在length属性中，其会返回数组长度。
				var colors=["red","blue","green"];
				alert(colors.length);          //3
		数组的length属性不是只读的。通过设置该属性，可以从数组的末尾移除或添加项。
				var colors=["bule","red","green"];
				colors.length=2;
				alert(colors[2]);//undefined
				colors.length=5;
				alert(colors[4]);//undefined
		由于数组最后一项的索引始终是length-1，因此下一项的位置是length
			所以可以利用其方便的在数组末尾添加新项。
				var colors=["bule","red","green"];
				colors[colors.length]="black";
				colors[colors.length]="brown";
		当把一个值放在超出当前数组大小的位置上时，数组就会重新计算其长度值
			即长度值等于最后一项索引+1；
				var colors=["bule","red","green"];
				colors[99] = "black";
				alert(colors.length);  //100
			上例位置3到位置98实际上都是不存在的，所以访问他们都将返回undefined.
		数组最多可以包含4294967295个项。如果想添加的项数超过这个上限值，就会发生异常。

1、检测数组：
	A、instanceof 
				var ary = [1,23,4];
				console.log(ary instanceof Array)//true;
				
	B、原型链方法（constructor）：
				var ary = [1,23,4];
				console.log(ary.__proto__.constructor==Array);//true
				console.log(ary.constructor==Array)//true 这两段代码是一样的	
				
		instanceof 和constructor 判断的变量，必须在当前页面声明的，
			比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），
			在子页面中声明了一个ary，并将其赋值给父页面的一个变量，
			这时判断该变量，Array == object.constructor;会返回false；
		原因：
			1、array属于引用型数据，在传递过程中，仅仅是引用地址的传递。
			2、每个页面的Array原生对象所引用的地址是不一样的，
				在子页面声明的array，所对应的构造函数，是子页面的Array对象；
				父页面来进行判断，使用的Array并不等于子页面的Array；
			切记，不然很难跟踪问题！		
			
	C、Array.isArray(arg)
		目的就是准确地检测一个值是否为数组。但会出现兼容性的问题，IE9之前的版本不支持
				var ary = [1,23,4];
				alert(Array.isArray(ary))	//true			
	
	D、Object.prototype.toString.call(myObj) === “[object Array]”
				var ary = [1,23,4];
				alert(Object.prototype.toString.call(ary)==='[object Array]');
		此为最准确的方案：
			在javascript中通过 Object.prototype.toString 方法来判断某个对象值属于哪种内置类型
			每个对象都有一个 toString() 方法，当对象被表示为文本值时或者当以期望字符串的方式引用对象时，
			该方法被自动调用。默认情况下，toString() 方法被每个继承自Object的对象继承。
			如果此方法在自定义对象中未被覆盖，
			toString() 返回 "[object type]"，其中type是对象类型
				var toString = Object.prototype.toString;
				toString.call(new Date); // [object Date]
				toString.call(new String); // [object String]
				toString.call(Math); // [object Math]
				toString.call(Array); // [object Array]
				//Since JavaScript 1.8.5
				toString.call(undefined); // [object Undefined]
				toString.call(null); // [object Null]		
				
2、转换方法：
	A、valueOf()
		返回的是数组本身
			ary = [1,2,3];
			s=ary.valueOf();
			console.log(s);        //[1, 2, 3]
			m=s[0]+s[1]+s[2];
			console.log(m);		//6
	
	B、toString()
		返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串
			为了创建这个字符串，会调用数组里每一项的toString()方法
				ary = [1,2,3];
				s=ary.toString();
				console.log(s);        //1,2,3
				console.log(typeof(s));		//string
				
	C、join()
		可以用不同的分隔符构建返回的字符串。只接收一个参数，
			即用作分隔符的字符串，返回包含所有数组项的字符串
				var ary = ["blue","red","yellow"];
				console.log(ary.join('&'))  //blue&red&yellow

3、栈方法：(加到末尾，末尾弹出)
	栈是一种后进先出的数据结构，即最新添加的项最早被移除。而栈里的项
		的插入（推入）和移除（弹出），只发生在栈的顶部
	A、push()——加到末尾
		可以接受任意数量的参数，把他们逐个添加到数组末尾，
			返回修改后的数组的长度
				var colors = new Array("green",  "red" );
				var count = colors.push("blue", "white");
				console.log(count); //4
				console.log(colors); //["green", "red", "blue", "white"]
		
	B、pop()——从末尾弹出
		无参数，从数组末尾移除最后一项，减小数组的length值，返回移除的项
				var colors = new Array("green",  "red" );
				var count = colors.pop();
				console.log(count); //red
				console.log(colors); //["green"]

4、队列方法：(加到开头，前面弹出)
	栈结构的访问规则是后进先出，而队列结构的访问规则是先进先出
		队列在列表的末尾添加项，从列表的前端移除项。
	A、shift()——末尾弹出
		移除数组中的第一项并返回该项，同时数组长度减一；
			利用shift()和push()可以实现队列先进先出的效果
				var colors = new Array("green",  "red" );
				var count = colors.push("white", "black");
				var finish = colors.shift();
				console.log(finish); //green
				console.log(colors); //["red", "white", "black"]
	
	B、unshift()——加到开头
		在数组前面添加任意个项，并返回新数组的长度。
			同时使用pop()、unshift()可以实现反方向来模拟队列
			即在数组前端添加项，末端移除项。
				var colors = new Array("green",  "red" );
				var count = colors.unshift("white", "black");
				var finish = colors.pop();
				console.log(finish); //red
				console.log(colors); // ["white", "black", "green"]

5、重排序方法：——返回值是经过排序之后的数值
	A、reverse()
		反转数组项的个数，有返回值，直接返回反转后的数组。
		var values = ["de", "e", "tr", "er", "vf", "bg"];
		var finish = values.reverse();
		console.log(finish);//["bg", "vf", "er", "tr", "e", "de"]
		console.log(values);//["bg", "vf", "er", "tr", "e", "de"]
		
	B、sort()
		sort()方法会直接对Array进行修改，它返回的结果仍是当前经过排序之后的Array
		按照升序排列数组项，即最小值位于最前面，最大值在最后。
			sort()会调用每个数组项的toString()转型方法，然后比较得到
			的字符串，以确定如何排序。即使数组中的每一项都是数值
			sort()方法比较的也是字符串。而且比较的也是各个元素的ASCII码大小
			sort()方法可以接受一个比较函数，以进行自定义排序
			
		比较函数接收两个参数:
			若第一个参数应该位于第二个之前，则返回一个负数
			若两值相等则返回0；
			若是第一个参数应该位于第二个之后，则返回一个正数。
				function compare(value1, value2){
					if(value1<value2){
						return -1;
					}
					if(value1>value2){
						return 1;
					}
					else {
						return 0;
					}
				}
			以上可以实现升序排列
		只要将其作为参数传递给sort()方法即可
				var values =[0, 3, 1, 5, 10, 15];
				values.sort(compare);
				console.log(values); //[0, 1, 3, 5, 10, 15]
		注意：只将函数名传递给sort参数，不需要加括号、带参数。
		
		如果需要降序，只需要交换比较函数的返回值即可，交换返回值的意思是让更大的值排位更靠前
		
		对于数值类型或者其valueOf()方法会返回数值类型的对象类型，可使用更简单的比较函数：
				function compare(value1, value2){
					return value1 - value2;
				}
				var values =[0, 3, 1, 5, 10, 15];
				values.sort(compare);
				console.log(values); //[0, 1, 3, 5, 10, 15]
				
6、操作方法：
	A、concat()
		基于当前数组中的所有项创建一个新数组。其首先创建一个当前数组的副本，
			然后将收到的参数添加到该副本的末尾，最后返回新建的数组。
			没有传递给concat方法参数时，只是复制当前数组并返回副本；
			传递给其一至多个数组时，该方法会将这些数组的每一项都添加到结果数组中。
			如果传递的不是数组，值会简单的添加到结果数组的末尾。
				var colors = ["red", "green", "blue"];
				var colors2 = colors.concat(["yellow", "black", "white"], ["pink", "gray"], "orange");
				console.log(colors);// ["red", "green", "blue"]
				console.log(colors2);// ["red", "green", "blue", "yellow", "black", "white", "pink", "gray", "orange"]
				
	B、slice()
		基于当前数组中的一项或多个项创建新数组。其接收一或两个参数，即返回项的起始位置。
			只有一个参数时，slice()方法返回参数指定位置开始到当前数组末尾的所有项。
			两个参数时，返回起始位置之间的项，但不包括结束的项，即含头不含尾。
				var colors = ["red", "green", "blue", "white", "black"];
				var colorsZero = colors
				var colors1 = colors.slice(1);
				var colors2 = colorsZero.slice(1,4);
				console.log(colors1); // ["green", "blue", "white", "black"]
				console.log(colors2);// ["green", "blue", "white"]
		如果slice()方法中的参数有一个负数，则用数组长度加上该负数来确定相应的位置
			即colors.slice(-3, -1)等价于colors.slice(-3+colors.length, -1+colors.length)即colors.slice（2, 4）
		如果结束位置小于起始位置，返回空数组
		
	C、splice()
		直接操作于原数组上，但其始终会返回一个数组，该数组包含被删除的项。
			如果没有被删除的项就直接返回原数组。
		主要用途是向数组中插入项，但有以下三种使用方式：
			1、删除：可以删除任意的项，只要指定2个参数——要删除的第一项的位置和要删除的项数
			例如splice(0, 3)，会删除前三项
				var colors = ["red", "green", "blue", "white", "black"];
				var colorsZero = colors;
				var colors1 = colors.splice(0, 3);
				console.log(colors1);// ["red", "green", "blue"]
				console.log(colors);	//	["white", "black"]
			2、插入：向指定位置插入任意多的项。提供三个参数：起始位置，0（表示要删除0项），要插入的项
			splice(3, 0, "Orange", "Gray"), 表示把要插入的项放在了位置3上。
				var colors = ["red", "green", "blue", "white", "black"];
				var colorsZero = colors;
				var colors1 = colors.splice(3, 0, "Orange", "Gray");
				console.log(colors1);// []
				console.log(colors);	//["red", "green", "blue", "Orange", "Gray", "white", "black"]把要插入的项放在了位置3上。
			3、替换：可以向指定位置插入任意数量的项，同时删除任意数量的项，以实现替换效果
			需要三个参数，起始位置、要删除的项的数目、要插入的任意数量的项。
			插入的项不用和删除的项数目相等
			splice(2, 1, "Orange", "Gray"), 表示把要删除位置2的项，并插入"Orange", "Gray"。
				var colors = ["red", "green", "blue", "white", "black"];
				var colorsZero = colors;
				var colors1 = colors.splice(2, 1, "Orange", "Gray");
				console.log(colors1);// ["blue"]删除了blue
				console.log(colors);	//["red", "green", "Orange", "Gray", "white", "black"].
				
7、位置方法
	A、indexOf()
		接收两个参数：要查找的项目，和表示查找起点的项。
		从数组开头0索引项开始向后查找，返回要查找的项在数组中的位置，没查到的情况返回-1
			比较查找时，使用全等操作符===，即查找的项必须是严格相等。
				var number = [12,3,4,5,5,2,3,1,12];
				console.log(number.indexOf(3));//1
	B、lastIndexOf()
		接收两个参数：要查找的项目，和表示查找起点的项。
		从数组尾端length-1索引项开始向后查找，返回要查找的项在数组中的位置，没查到的情况返回-1	
			比较查找时，使用全等操作符===，即查找的项必须是严格相等。
				var number = [12,3,4,5,5,2,3,1,12];
				console.log(number.lastIndexOf(3));//6
	
	以上两函数一旦查找到第一项就停止继续查找而返回，如果想遍历所有项，可如下编写；
				var number = [12,3,4,5,5,2,3,1,12,3];
				for(var i = 0 ; i<number.length; i++){
					if(i != number.length){
						console.log(number.indexOf(3,i));
					}
				}
				
8、迭代方法：
	有5个迭代方法，每个方法都接收两个参数：要在每一项上运行的函数和运行该函数的作用域->影响this的值
		传入这些方法中的函数会接收三个参数——数组项的值、该项在数组中的位置、数组对象本身
	其不会修改数组中的值
	
	A、every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true
	B、filter()：对数组中的每一项运行给定函数，返回所有的该函数返回true的项组成的数组
	C、forEach()：对数组中的每一项运行给定函数，无返回值
	D、map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组
	E、some()：对数组中的每一项运行给定函数，如果该函数对任意某一项返回true，则返回true
				var number = [12,3,4,5,5,2,3,1,12,3];
				var filterResult = number.filter(function(item, index, array){
					return (item > 2);
				})
				console.log(filterResult);//[12, 3, 4, 5, 5, 3, 12, 3]
					
				var number = [12,3,4,5,5,2,3,1,12,3];
				var filterResult = number.filter(function(item, index, array){
					return item>2;
				}
				)
				console.log(filterResult); //[12, 3, 4, 5, 5, 3, 12, 3]
				var mapResult = filterResult.map(function(item, index, array){
					return item*2;
					}
				)
				console.log(mapResult);//[24, 6, 8, 10, 10, 6, 24, 6]
	
9、归并方法：
	迭代数组的所有项，构建一个最终返回的值，接收两个参数：在每一项上调用的函数、作为归并基础的初始值
		调用函数接收4个参数：前一个值、当前值、项的索引、数组对象
		该函数返回的任何值都会作为第一个参数自动传给下一项。
		第一次迭代发生在数组的第二项。故第一个参数是数组的第一项、第二个参数是数组的第二项
	A、reduce()
		从数组的第一项开始，逐个遍历到最后。
	B、reduceRight()
		从数组的最后一项开始，逐个遍历到开头。

		如何知道一串字符串中每个字母出现的次数？
				var arrString = 'abcdaabc';

				arrString.split('').reduce(function(pre, cur) {
					pre[cur] ? pre[cur] ++ : pre[cur] = 1
					return pre;
				}, {})	
				//{a: 3, b: 2, c: 2, d: 1}
		在reduce的第二个参数里面初始了回调函数第一个参数的类型和值，
			将字符串转化为数组，那么迭代的结果将是一个对象，
			对象的每一项key值就是字符串的字母。
		由于可以通过第二参数设置叠加结果的类型初始值，因此这个时候reduce就不再仅仅只是做一个加法了，
			我们可以灵活的运用它来进行各种各样的类型转换，比如将数组按照一定规则转换为对象，
			也可以将一种形式的数组转换为另一种形式的数组