一、基本类型和引用类型
	基本数据类型：Boolean、Null、Undefined、Number、String
		其是按值访问的，可以操作保存在变量里的实际的值
	引用类型：object
		其值是保存在内存中的对象。js不允许直接访问内存中的位置，也就是不能直接操作对象的内存空间
		操作对象时，实际上是操作对象的引用而不是实际的对象
	
	对于引用类型的值，可以通过为其添加或删除属性和方法
			var person = new Object();
			person.name = "Nicholas";	
	却不能给基本类型的值添加属性
	
	1复制变量值
		从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值
			然后把该值复制到为新变量分配的位置。
				var num1 = 5;
				var num2 = num1;
		num1与num2中的5是完全独立的，num2的值只是num1的5的一个副本，
			这两个变量可以参与任何操作而不会相互影响
		
		当复制引用类型的值时，也会为存储在变量对象中的值复制一份放到为新变量分配的空间
			不同的是，这个值的副本实际上是一个指针。指针指向存储在堆中的一个对象。
			复制结束后，两个变量实际上将引用同一个对象。改变其中一个值，就会影响到
			另一个对象
				var obj1 = new Object();
				var obj2 = obj1;
				obj1.name = "NIkang";
				alert(obj2.name); //也为"NIkang"
		
	2、传递参数
	按引用传递：只有在C或C++里才有按引用传递。
		指的是用取地址符取到变量地址，作为实参传递给形参的指针变量。
		这里的实参是地址常量，不是指针变量。
		传递的是对象的引用，同一个引用指向相同的实体，
		所以改变引用指向实体的值，可以影响main函数中实体的值。
			引用类型放在堆中，引用传递不会再开辟空间创造一个新对象，形参指针还是指向原来的那块堆内存
	
	按值传递：值传递是指将值的副本传递给调用的函数，调用的函数可以改变副本的值，但是并不会影响main函数中的原值。
			值类型存在栈中，值传递表示在栈中再开辟一个新空间，
				形参指针指向的是新开辟的栈空间（所以对实参指针无影响）
	
	按共享传递：在传递对象的时候，传递对象的引用的副本。
	
	按引用传递是传递对象的引用，而按共享传递是传递对象的引用的副本
	
	
	
		ECMAScript中的所有函数的参数都是按值传递的，
			也就是说，把函数外部的值复制给函数内部的参数，就和把值从
			一个变量复制到另一个变量一样。
		基本类型值的传递如同基本类型变量的复制一样
		引用类型值的传递如同引用类型变量的复制一样
		访问变量有按值和按引用两种方式、但参数只能是按值传递
		
		引用类型的变量依然是按值传递的。
			这是因为引用类型也是一个变量，只是这个变量的值是另一块内存的地址。
			将引用类型变量传递给函数形参，【函数同样会为该形参在栈上开辟新的空间】，存放实参中的地址值。
			因此这依然是按值传递，只不过这个值是地址值而已。		
		
		向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（命名参数，就是argument对象中的一个元素）
		向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量
			的变化会反映在函数的外部。
				function setName(obj) {
					obj.name = "Nicholas";
				}
				
				var person = new Object();
				setName(person);
				alert(person.name);    //"Nicholas"			
		可以发现，obj与person引用的是同一个对象。即使这个变量是按值传递的，obj也会按照引用来访问同一个对象
		当在函数内部为obj添加name属性后，函数外部的person也将有所反应，
			因为person指向的对象在堆内存中只有一个，而且是全局对象。
				function setName(obj) {
					obj.name = "Nicholas";
					alert(obj.name+"1"); //Nicholas1 
					obj = new Object();
					obj.name = "GER";
					alert(obj.name+"2"); //GER2
				}
				
				var person = new Object();
				setName(person);
				alert(person.name+"3");    //"Nicholas3"
		在调用 setName() 函数初时，obj 与 person 引用的是同一对象，
			所以首次的 name 属性赋值会对 person 有所影响。
			但是当 obj 被重新定义时，其引用的对象已经与 person 不同，
			所以后面设置的 name 属性，不会对 person 引用的对象有任何影响。
		如果person是按引用传递的，那么person就会自动被修改为指向其name属性值为“GER”的新对象。
			但当访问person.name时，值仍为Nicholas。说明即使在函数内部修改了参数的值，
			原始的引用仍然保持未变。当在函数内部重写obj时，这个变量引用的就是一个局部变量了
			其会在函数执行完毕后立即销毁。
			
	3、检测类型：
		检测是否是基本数据类型用typeof：返回字符串、数值、布尔值、undefined、object
			若是null或者object则返回object
				var s = "Nicholas";
				var b = true;
				var i = 22;
				var u;
				var n = null;
				var o = new Object();
				
				alert(typeof s);   //string
				alert(typeof i);   //number
				alert(typeof b);   //Boolean
				alert(typeof u);   //undefined
				alert(typeof n);   //object
				alert(typeof o);   //object			
		检测引用值用instanceof操作符：result=object instanceof constructor
		如果变量是给定引用类型的实例，则instanceof操作符就会返回true
				alert(person instanceof object);//变量person是object吗？返回true/false
		所有引用类型的值都是object的实例，在检测一个引用类型值和object构造函数时，
			instanceof操作符始终会返回true。检测到基本类型时返回false。
			instanceof操作符检测函数时会返回function

二、执行环境及作用域
	执行环境定义了变量或函数有权访问的其他数据，决定了他们各自的行为。
		每个执行环境都有与其关联的变量对象，环境中定义的所有变量和函数都保存在其中。
	全局变量执行环境时最外围的一个执行环境。Web浏览器中，全局执行环境是window对象
		所有全局变量和函数都是作为window对象的属性和方法创建的。
	某个执行变量中的所有代码执行完毕后，该环节被销毁，保存在其中的所有变量和函数也被销毁
	
	当执行流进入一个函数时，函数的环境会被推入一个环境栈中，函数执行之后，栈将其弹出
		把控制权返回给之前的执行环境
	当代码在一个环境中执行时，会创建变量对象的一个作用域链，以保证对执行环境有权访问
		的所有变量和函数的有序访问。
	作用域链的前端始终是当前执行代码的所在环境的变量对象。若该环境是函数，则将其活动对象(activation object)
		作为变量对象。活动对象开始时只包含一个变量即argument对象（其不存在于全局环境），下一个变量对象
		来自包含(外部)环境，在下一个则来自下一个包含环境，一直延续到全局执行环境，全局执行环境始终都是
		作用域链中的最后一个对象
				var color = "blue";
				function changColor(){
					var anotherColor = "red";
					
					function swapColor(){
						var tempColor = anotherColor;
						anotherColor = color;
						color = tempColor;
						//这里可以访问 color、anotherColor、tempColor
					}
					//	这里可以访问 color、anotherColor，但不能访问tempColor
					swapColor();
				}
				//这里只能访问color
				changColor();
	内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。
		每个环境都可以向上搜索作用域链，以查询变量和环境名。但任何环境都不能通过向下搜索
		作用域链而进入另一个执行环境。
		window
			|
			——color
			|
			——changeColor()
						|
						——anotherColor
						|
						——swapColor()
									|
									——tempColor
	对于上例中的swapColor()而言，其作用域包含3个对象：swapColor()的变量对象
		changeColor()的变量对象和全局变量对象。
	swapColor()的局部环境开始时会先在自己的变量中搜索变量和函数名，搜不到再搜索上一级作用域链
	
	代码在运行时，变量的查找总是从作用域链的底部开始往上查找，
		如果第一层没找到，就要从更高一级作用域查找，这样一直找下去，
		一直找到全局作用域，如果没有找到则返回undefined。
	从作用域链的结构可以看出，在运行期上下文的作用域链中，
		标识符所在的位置越深，读写速度就会越慢。
		因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。
		所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。
		一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，
		则先把它存储到局部变量里再使用。如下面的代码：
				function changeColor(){
					document.getElementById("btnChange").onclick=function(){
						document.getElementById("targetCanvas").style.backgroundColor="red";
					};
				}	
	这个函数引用了两次全局变量document，查找该变量必须遍历整个作用域链，
		直到最后在全局对象中才能找到。这段代码可以重写如下：
			function changeColor(){
				var doc=document;
				doc.getElementById("btnChange").onclick=function(){
					doc.getElementById("targetCanvas").style.backgroundColor="red";
				};
			}		
	将所有的全局变量document换位局部变量doc
		
	1、延长作用域链
		try-catch语句的catch块、with语句可以在作用域链的前端临时增加一个变量对象，其在代码
			执行后被移除。对with语句来说，会将指定的对象添加到作用域链中
			对catch语句来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明
				function buildUrl() {
					var qs = "?debug=true";
				
					with(location){
						var url = href + qs;        
					}
				
					return url;
				}

				var result = buildUrl();
				alert(result);			
		with接收的是location对象，其变量对象中包含了location的所有属性和方法，而该变量对象
			被添加到了作用链域的前端。buildUrl()函数中定义了一个变量qs。当在with语句中引用href时（实际引用的时location.href）
			可以在当前执行环境的变量对象中找到。当引用变量qs时，引用的则是在下一级执行环境buildUrl()中定义的那个变量。
			该变量位于函数环境的变量对象中。至于with语句内部，定义了一个url的变量，因而url就成为了函数执行环境
			的一部分。可以作为函数的返回值被返回。由于JavaScript中没有块级作用域，
			所以在函数内部可以访问 url 才能 return 成功，说明 url 并不是添加到 location 所在的变量对象中。
				原本：												
				window
					|
					——buildUrl()
					|			|
					|			——qs
					|			|
					|			——location
					|						|
					|						——url
					|			
					———result						将buildUrl()的作用链域的延长到了location内部

		添加到作用域链前端是不是指对象会被放置到作用域链的最底部，然后查找变量时最先查找这个对象
			（按照我的理解，js的作用域链查找变量的过程是一个冒泡的过程，底部开始往上走，找到了就停止冒泡），
			第二点就是，执行之后移除是不是指with语句之后就移除那个对象。
				var b = {a:2};
				function sayA(){
					var a = 1;
					with(b){alert(a);}
					alert(a);
				}
				sayA();
		代码运行结果是2和1。这证实了我之前的猜想，因为正常情况，
			位于作用域链底部的应该是函数的局部变量a，
			然而with语句中的a却是对象b的字段a，
			这证明对象b占据了作用域链中最底部的位置。
			而with语句之后的a的值又变成了1，说明对象b已从作用域链最底部移除。
	
	2、没有块级作用域
		由花括号{}封闭的代码块都有自己的作用域，但js没有，导致了for语句创建的变量i
			在循环结束之后依旧存在于循环外部的执行环境中。
		用var声明的变量会自动被添加到最近的环境中，函数内则是函数的局部环境；
			with语句内则是函数环境。若是初始化变量时没用var声明，则会被添加到
			全局环境中，导致了即使函数执行完毕，之后的代码也可以访问他。
		某环境需要读取或引用一个标识符时，需要进行搜索来确定该标识符实际意义，
			搜索过程从作用域的链的前端开始，向上逐级查找与给定名字匹配的标识符，
			若在局部变量中找到，停止搜索，否则继续沿作用链向上搜索，直至追溯到
			全局环境的变量对象。
		一旦存在着局部的变量定义，搜索会停止，不在进入另一个变量对象。
			也就是说若局部变量中，若存在在同名标识符，就不会使用父环境中的标识符。
				var color = "blue";
				
				function getColor(){
					var color = "red";
					return color;
				}
				
				alert(getColor());  //"red"	
	
三、垃圾收集：
	执行环境会负责管理代码执行过程中使用的内存，其原理：
		找到不再使用的变量，释放其占有的内存。
	1、标记清除策略：
		当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，
		因为只要执行流进入相应的环境，就可能会用到他们。
		当变量离开环境时，则将其标记为“离开环境”。
		垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。
		然后，它会去掉环境中的变量以及被环境中的变量引用的标记。
		而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。
		最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。
		
	2、引用计数
		其会导致循环引用。
				function fn() {
				  var a = {};
				  var b = {};
				  a.pro = b;
				  b.pro = a;
				}

				fn();
		IE中有一部分对象并不是原生js对象。例如，其DOM和BOM中的对象就是使用C++以COM对象的形式实现的，
			而COM对象的垃圾回收机制采用的就是引用计数策略。
			因此，即使IE的js引擎采用标记清除策略来实现，但js访问的COM对象依然是基于引用计数策略的。
			换句话说，只要在IE中涉及COM对象，就会存在循环引用的问题。
				var element = document.getElementById("some_element");
				var myObject = new Object();
				myObject.e = element;
				element.o = myObject;		
		这个例子在一个DOM元素（element)与一个原生js对象（myObject)之间创建了循环引用。
			其中，变量myObject有一个名为element的属性指向element对象；
			而变量element也有一个属性名为o回指myObject。
			由于存在这个循环引用，即使例子中的DOM从页面中移除，它也永远不会被回收。

　　为了避免类似这样的循环引用问题，最好是在不使用它们的时候手工断开原生js对象与DOM元素之间的连接：
				myObject.element = null;
				element.o = null;
		
		3、性能问题：
		垃圾收集器是周期性运行的，确定垃圾收集的时间间隔很重要。
		触发垃圾收集的变量分配、字面量和数组元素的临界值被调整为动态修正。
			IE7中的各项临界值在初始时与IE6相等。如果垃圾收集例程回收的内存分配量低于15%，
			则变量、字面量和数组元素的临界值就会加倍。
			如果例程回收了85%的内存分配量，则将各种临界值重置回默认值。
		
		4、管理内存：
		确保占用最少的内存可以让页面获得更好的性能。
			而优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据。
			一旦数据不再使用，最好通过设置其值为null来释放其引用（称作解除引用）
			解除引用适用于大多数全局变量和全局变量的属性，而局部变量会在离开环境时被自动解除引用。
		解除一个值的引用并不意味这回收该值所占用的内存。
			解除引用的真正作用是让值脱离执行环境，以便垃圾回收期下次运行时将其回收。
				function creatPerson(name){
					var localPerson = new Object();
					localPerson.name = name;
					return localPerson;
				}
				var gloalPerson = creatPerson("Nicholas");
				//手工解除对 gloalPerson 的引用。
				gloalPerson = null；
			
